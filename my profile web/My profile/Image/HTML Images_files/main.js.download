/*
  Pathfinder script
*/

window.Pathfinder = {
  _enabled: false,
  _state: null,

  _baseUrl: 'https://pathfinder.w3schools.com',
  _apiBaseUrl: 'https://pathfinder-api.kai.w3spaces.com',
  _mylApiBaseUrl: 'https://myl-api.w3schools.com',

  _currentTopicId: null, // we get it from MyLearning script
  _currentLessonFinishedOnInit: null, // we get it from MyLearning script

  _activeUserGoalMeta: null,
  _activeUserGoalNavMeta: null,
  _bumpXp: false,
  _userXp: null,
  _userSkills: null,

  _uiTemplates: {},
  _uiMyPathRendered: false,
  _uiProgressUpdated: null,
  _menuModalRendered: false,
  _infoModalRendered: false,
};

Pathfinder._isDebugMode = function () {
  return Util.isDebugMode('Pathfinder');
};

Pathfinder._logDebug = function (message, data, logRawData) {
  return Util.logDebug('Pathfinder', message, data, logRawData);
};

Pathfinder._logError = function (message, data, logRawData) {
  return Util.logError('Pathfinder', message, data, logRawData);
};

Pathfinder.init = function () {
  Pathfinder._logDebug('init');

  if (Pathfinder._enabled === null) {
    Pathfinder._enabled = localStorage.getItem('Pathfinder.enabled') === 'true';
  }

  Pathfinder._logDebug('init -> enabled: ', Pathfinder._enabled);

  if (!Pathfinder._enabled) {
    return;
  }

  var _init = async (callback) => {
    var output = {
      error: {
        code: '1',
        description: 'Failed performing "Pathfinder._init"'
      },
      data: null,
    };

    var prepareOutput = (output) => {
      if (output.error.code === '1') {
        output.error = { code: '0' };
      }

      if (output.error.code !== '0') {
        Pathfinder._logDebug('init -> error -> output: ', output);
        Pathfinder.clearState();
      }

      if (typeof callback !== 'undefined') {
        callback(output);
      }

      return output;
    };

    var state = Pathfinder.getState();

    var urlQueryPrs = new URLSearchParams(window.location.search);
    var urlActiveUserGoalId = urlQueryPrs.get('goalId');

    if (urlActiveUserGoalId) {
      state = Pathfinder.updateState({
        activeUserGoalId: urlActiveUserGoalId,
      });
    }

    if (state.activeUserGoalId) {
      // check if active goal is valid
      var fetchUserGoalRes = await Pathfinder.fetchUserGoal(state.activeUserGoalId);

      Pathfinder._logDebug('init -> state, fetchUserGoalRes: ', {
        state: state,
        fetchUserGoalRes: fetchUserGoalRes,
      });

      if (fetchUserGoalRes.error.code === '0') {
        if (typeof fetchUserGoalRes.data.skills[Pathfinder._currentTopicId] === 'undefined') {
          output.error = {
            code: 'CTINPOAG',
            description: 'Current topic is not part of the active goal',
            meta: {
              goal: fetchUserGoalRes.data,
              currentTopicId: Pathfinder._currentTopicId,
            }
          };

          output.error.context = 'Pathfinder.fetchUserGoal';
          return prepareOutput(output);
        }
      } else {
        output.error = fetchUserGoalRes.error;
        output.error.context = 'Pathfinder.fetchUserGoal';
        return prepareOutput(output);
      }
    } else {
      output.error = {
        code: 'NO_ACTIVE_GOAL',
        description: 'No active goal',
        context: 'Pathfinder.fetchUserGoal',
      };

      return prepareOutput(output);
    }

    var promises = [];

    // Initiate fetch bulk meta and push its promise to the array
    promises.push(Pathfinder.fetchLearningPathMeta({
      goalId: state.activeUserGoalId,
      topicId: Pathfinder._currentTopicId,
      lessonPath: window.location.pathname,
    }));

    // cache my path template
    promises.push(Pathfinder.uiFetchTemplate('/lib/pathfinder/html/user-authenticated/my-path.tmpl.html'));

    // Check for cookie and possibly initiate modal rendering
    var hideMyPathInfoModal = Cookies.get('Pathfinder.hideMyPathInfoModal');
    if (hideMyPathInfoModal !== 'true') {
      promises.push(Pathfinder.uiRenderMyPathInfoModal());
    }

    var promiseRes = await Promise.all(promises);

    var fetchLearningPathMetaRes = promiseRes[0]; // Result of fetchLearningPathMeta

    Pathfinder._logDebug('init -> fetchLearningPathMetaRes: ', fetchLearningPathMetaRes);

    if (fetchLearningPathMetaRes.error.code !== '0') {
      output.error = fetchLearningPathMetaRes.error;
      output.error.context = 'Pathfinder.prepareUserGoalNavMeta';
      return prepareOutput(output);
    }

    const fetchLearningPathMetaData = fetchLearningPathMetaRes.data;

    Pathfinder._activeUserGoalMeta = fetchLearningPathMetaData.learningPath.goal;
    Pathfinder._userXp = fetchLearningPathMetaData.learningPath.user.xp;
    Pathfinder._userSkills = fetchLearningPathMetaData.learningPath.user.skills;

    Pathfinder.uiRenderMyPath(fetchLearningPathMetaData.navMeta);

    return prepareOutput(output);
  };

  Util.objFieldOnSetCallback({
    scopeRef: MyLearning,
    fieldName: 'topicId', // set by MyLearning only after it's fetched from the server
    callback: function (res) {
      if (res.error.code === '0') {
        Pathfinder._currentTopicId = MyLearning.topicId;
        Pathfinder._currentLessonFinishedOnInit = MyLearning.lessonFinishedOnInit;

        Pathfinder._logDebug('currentTopicId, currentLessonFinishedOnInit: ', {
          currentTopicId: Pathfinder._currentTopicId,
          currentLessonFinishedOnInit: Pathfinder._currentLessonFinishedOnInit,
        });

        _init((res) => {
          if (res.error.code === 'FFUPGBID') {
            _init();
          }
        });
      } else {
        Pathfinder._logError('MyLearning.topicId -> res: ', res);
      }
    }
  });
};

Pathfinder.updateProgressOnVisitedLesson = function () {
  var progress = Pathfinder._activeUserGoalNavMeta.progress;

  if (progress.goalTargetLessonsCount <= 0) { // nothing to update
    return progress;
  }

  progress.goalTargetLessonsCount -= 1;
  progress.percentage = Util.getProgressPercentage(
    progress.lessonsCount - progress.goalTargetLessonsCount,
    progress.lessonsCount
  );

  return progress;
};

Pathfinder.clearState = function () {
  Pathfinder._state = null;

  sessionStorage.removeItem('Pathfinder.state');
};

Pathfinder.getState = function () {
  if (Pathfinder._state !== null) {
    return Pathfinder._state;
  }

  var rawState = sessionStorage.getItem('Pathfinder.state');

  if (rawState === null) { // not set
    Pathfinder._state = {};
  } else {
    var parseJsonRes = Util.parseJson(rawState);

    if (parseJsonRes.error.code !== '0') {
      Pathfinder._logError('getState -> parseJsonRes: ', parseJsonRes);
    }

    Pathfinder._state = parseJsonRes.data;
  }

  return Pathfinder._state;
};

Pathfinder.updateState = function (data) {
  var stateRef = Pathfinder.getState();

  try {
    for (var key in data) {
      if (data.hasOwnProperty(key)) {
        stateRef[key] = data[key];
      }
    }

    stateRef.updatedUtms = Util.getCurrentUtms();

    sessionStorage.setItem('Pathfinder.state', JSON.stringify(stateRef));
  } catch (exc) {
    Pathfinder._logError('updateState -> error, state: ', {
      error: Util.getMetaPreparedFromException(exc),
      state: stateRef,
    });
  }

  return stateRef;
};

Pathfinder.fetch = async (prs) => {
  return new Promise((resolve) => {
    prs.callback = resolve;

    Util.fetch(prs);
  });
};

Pathfinder.fetchUserGoal = async (userGoalId) => {
  var output = {
    error: {
      code: '1',
      description: 'Failed performing "Pathfinder.fetchUserGoal"'
    },
    data: null,
  };

  var fetchRes = await Pathfinder.fetch({
    context: 'Pathfinder',
    method: 'GET',
    url: Pathfinder._apiBaseUrl + '/goals-api/goals/' + userGoalId,
    sendCookies: false,
    withUserSession: true,
    prepareResponseData: true,
  });

  Pathfinder._logDebug('fetchUserGoal -> fetchRes: ', fetchRes);

  if (fetchRes.error.code === '0') {
    if (typeof fetchRes.data.goalId !== 'undefined') {
      output.data = fetchRes.data;
    } else {
      output.error = {
        code: 'FFUPGBID',
        description: 'Failed fetching user`s pathfinder goal by ID',
        meta: {
          userGoalId,
          fetchRes,
        }
      };
    }
  } else {
    output.error = fetchRes.error;
  }

  if (output.error.code === '1') {
    output.error = { code: '0' };
  }

  return output;
};

Pathfinder.fetchLearningPathMeta = async (prs) => {
  var output = {
    error: {
      code: '1',
      description: 'Failed performing "Pathfinder.fetchLearningPathMeta"'
    },
    data: null,
  };

  var goalId = prs.goalId;
  var topicId = prs.topicId;
  var lessonPath = prs.lessonPath;

  var fetchRes = await Pathfinder.fetch({
    context: 'Pathfinder',
    method: 'GET',
    url: Pathfinder._mylApiBaseUrl + '/api/pathfinder/learning-path?goalId=' + goalId + '&topicId=' + topicId + '&lessonPath=' + encodeURIComponent(lessonPath),
    sendCookies: false,
    withUserSession: true,
    prepareResponseData: true,
  });

  Pathfinder._logDebug('fetchLearningPathMeta -> fetchRes: ', fetchRes);

  if (fetchRes.error.code === '0') {
    output.data = fetchRes.data;
  } else {
    output.error = fetchRes.error;
  }

  if (output.error.code === '1') {
    output.error = { code: '0' };
  }

  return output;
};

// UI

Pathfinder.uiGetIconHtml = function (params) {
  var id = params.id;
  var type = params.type;
  var size = params.size || 'auto 100%';
  var containerSize = params.containerSize || '16px 16px';
  var containerSizeChunks = containerSize.split(' ');
  var containerWidth = containerSizeChunks[0];
  var containerHeight = containerSizeChunks[1];
  var color = params.color || 'white';
  var customStyles = params.style || '';

  if (typeof type === 'undefined') {
    type = 'main';
  }

  var svgPath = '/lib/pathfinder/icon/' + type + '/' + id + '.svg';

  var svgStyles = '-webkit-mask: url(' + svgPath + ') no-repeat center;';
  svgStyles += 'mask: url(' + svgPath + ') no-repeat center;';
  svgStyles += '-webkit-mask-size: ' + size + ';';
  svgStyles += 'mask-size: ' + size + ';';
  svgStyles += 'width: ' + containerWidth + ';';
  svgStyles += 'height: ' + containerHeight + ';';
  svgStyles += customStyles;

  return '<div class="-svg-icon -svg-' + id + '-icon -color-' + color + '" style="' + svgStyles + '"></div>';
};

Pathfinder.uiFetchTemplate = async (fetchUrl) => {
  if (typeof Pathfinder._uiTemplates[fetchUrl] !== 'undefined') {
    return Pathfinder._uiTemplates[fetchUrl];
  }

  var output = {
    error: {
      code: '1',
      description: 'Failed performing "Pathfinder.uiFetchTemplate"'
    },
    data: null,
  };

  var fetchRes = await Pathfinder.fetch({
    context: 'Pathfinder',
    method: 'GET',
    url: fetchUrl,
    sendCookies: false,
    withUserSession: false,
    prepareResponseData: false,
  });

  Pathfinder._logDebug('uiFetchTemplate -> fetchUrl, fetchRes: ', {
    fetchUrl: fetchUrl,
    fetchRes: fetchRes,
  });

  if (fetchRes.error.code === '0') {
    output.data = fetchRes.dataStr;

    output.error = { code: '0' };
  } else {
    output.error = fetchRes.error;
  }

  Pathfinder._uiTemplates[fetchUrl] = output;

  return output;
};

Pathfinder.getLessonFullTitle = function (lesson, topics) {
  if (lesson === null) {
    return 'Lesson title unknown';
  }

  // Pathfinder._logDebug('lesson, topics: ', { lesson, topics });
  return topics[lesson.topicUuid].name + ' - ' + topics[lesson.topicUuid].subSkills[lesson.chapterUuid].name + ' - ' + lesson.name;
};

Pathfinder.uiPrepareTemplateHtml = function (template, params) {
  var output = template;

  Object.keys(params).forEach(function (key) {
    var placeholder = '{{ ' + key + ' }}';

    output = output.replace(new RegExp(placeholder, 'g'), params[key]);
  });

  return output;
};

Pathfinder.uiUpdateProgress = function () {
  if (Pathfinder._uiProgressUpdated !== null) {
    return;
  }

  Pathfinder._uiProgressUpdated = false;

  var myPathElement = document.querySelector('.w3s-pathfinder.-my-path');

  if (Pathfinder._bumpXp) {
    Pathfinder._userXp += 10;

    var xpIncrementElement = myPathElement.querySelector('.-xp .-increment');
    var xpAmountElement = myPathElement.querySelector('.-xp .-amount');
    // var progressBarElement = myPathElement.querySelector('.-progress-bar');

    if (
      !xpAmountElement
      || !xpIncrementElement
      // || !progressBarElement
    ) {
      Pathfinder._logError('uiUpdateProgress -> related elements not found');
      return;
    }
  }

  function actualUiUpdateProgress() {
    if (Pathfinder._uiProgressUpdated) {
      return;
    }

    Pathfinder._uiProgressUpdated = true;

    var myPathElement = document.querySelector('.w3s-pathfinder.-my-path');

    if (Pathfinder._bumpXp) {
      Pathfinder._activeUserGoalNavMeta.current.lesson.visited = true;

      var xpIncrementElement = myPathElement.querySelector('.-xp .-increment');
      var xpAmountElement = myPathElement.querySelector('.-xp .-amount');

      xpAmountElement.textContent = Pathfinder._userXp;
      xpIncrementElement.classList.add('-active');
    }

    // var progress = Pathfinder.updateProgressOnVisitedLesson();
    // var progressPercentage = progress.percentage + '%';

    // var progressBarElement = myPathElement.querySelector('.-progress-bar');
    // var progressBarSliderElement = progressBarElement.querySelector('.-slider');

    // progressBarElement.title = progressPercentage;
    // progressBarSliderElement.title = progressPercentage;
    // progressBarSliderElement.style.width = progressPercentage;

    var nextLessonBtnElement = myPathElement.querySelector('.-next-lesson-btn');

    if (
      !nextLessonBtnElement.classList.contains('-disabled')
      && nextLessonBtnElement.classList.contains('-variant-1')
    ) {
      setTimeout(() => {
        nextLessonBtnElement.classList.add('-variant-4');
        nextLessonBtnElement.classList.remove('-variant-1');
      }, 500);
    }

    // nextLessonBtnElement.classList.remove('-variant-1');
    // nextLessonBtnElement.classList.add('-variant-6');
  }

  function onScrollHandler() {
    var myPathElement = document.querySelector('.w3s-pathfinder.-my-path');

    if (Util.elementIsInViewport(myPathElement)) {
      actualUiUpdateProgress();
      window.removeEventListener('scroll', onScrollHandler);
    }
  }

  if (Util.elementIsInViewport(myPathElement)) {
    actualUiUpdateProgress();
  } else {
    window.addEventListener('scroll', onScrollHandler);
  }
};

Pathfinder.uiStopClickPropagation = function (event) {
  event.stopPropagation();
}

Pathfinder.uiCloseMyPathInfoModal = function () {
  var infoWrapperElm = Util.getInnerElement(document.body, '.w3s-pathfinder.-my-path-info');

  if (infoWrapperElm) {
    // detach event listeners
    infoWrapperElm.removeEventListener('click', Pathfinder.uiStopClickPropagation);

    Util.getInnerElement(infoWrapperElm, '.-close-btn').removeEventListener('click', Pathfinder.uiCloseMyPathInfoModal);

    Util.getInnerElement(infoWrapperElm, '.-blur-overlay').removeEventListener('click', Pathfinder.uiCloseMyPathInfoModal);

    Util.getInnerElement(infoWrapperElm, '.-understand-btn').removeEventListener('click', Pathfinder.uiMyPathInfoModalHandleUnderstandBtn);

    Util.getInnerElement(infoWrapperElm, '.-dont-show-again').removeEventListener('click', Pathfinder.uiMyPathInfoModalToggleDontShowCheckbox);

    infoWrapperElm.remove();

    Pathfinder._infoModalRendered = false;
  }
};

Pathfinder.uiMyPathInfoModalHandleUnderstandBtn = function () {
  var checkboxWrapperElm = Util.getInnerElement(document.body, '.w3s-pathfinder.-my-path-info .-dont-show-again');

  if (checkboxWrapperElm) {
    if (checkboxWrapperElm.classList.contains('-checked')) {
      Cookies.set('Pathfinder.hideMyPathInfoModal', 'true', { expires: 365 });
    }
  }

  Pathfinder.uiCloseMyPathInfoModal();
};

Pathfinder.uiMyPathInfoModalToggleDontShowCheckbox = function () {
  var checkboxWrapperElm = Util.getInnerElement(document.body, '.w3s-pathfinder.-my-path-info .-dont-show-again');

  if (checkboxWrapperElm) {
    if (checkboxWrapperElm.classList.contains('-checked')) {
      checkboxWrapperElm.classList.remove('-checked');
    } else {
      checkboxWrapperElm.classList.add('-checked');
    }
  }
};

Pathfinder.uiRenderMyPathInfoModal = async () => {
  if (Pathfinder._infoModalRendered) {
    return;
  }

  Pathfinder._infoModalRendered = true;

  var templateFetchRes = await Pathfinder.uiFetchTemplate('/lib/pathfinder/html/user-authenticated/my-path-info-modal.tmpl.html');

  Pathfinder._logDebug('uiRenderMyPathInfoModal -> templateFetchRes: ', templateFetchRes);

  if (templateFetchRes.error.code !== '0') {
    Pathfinder._logError('uiRenderMyPathInfoModal -> templateFetchRes: ', templateFetchRes);
    return;
  }

  var targetElm = document.body;

  var tmpPlaceholderDiv = document.createElement('div');
  tmpPlaceholderDiv.innerHTML = templateFetchRes.data;

  targetElm.appendChild(tmpPlaceholderDiv.firstChild);

  var infoWrapperElm = Util.getInnerElement(targetElm, '.w3s-pathfinder.-my-path-info');

  if (!infoWrapperElm) {
    Pathfinder._logError('uiRenderMyPathInfoModal -> wrapper elm not found');
    return;
  }

  infoWrapperElm.addEventListener('click', Pathfinder.uiStopClickPropagation);

  Util.getInnerElement(infoWrapperElm, '.-close-btn').addEventListener('click', Pathfinder.uiCloseMyPathInfoModal);

  Util.getInnerElement(infoWrapperElm, '.-blur-overlay').addEventListener('click', Pathfinder.uiCloseMyPathInfoModal);

  Util.getInnerElement(infoWrapperElm, '.-understand-btn').addEventListener('click', Pathfinder.uiMyPathInfoModalHandleUnderstandBtn);

  Util.getInnerElement(infoWrapperElm, '.-dont-show-again').addEventListener('click', Pathfinder.uiMyPathInfoModalToggleDontShowCheckbox);
};

Pathfinder.uiRenderMyPath = async (userGoalNavMeta) => {
  if (Pathfinder._uiMyPathRendered) {
    return;
  }

  Pathfinder._logDebug('uiRenderMyPath -> userGoalNavMeta: ', userGoalNavMeta);

  Pathfinder._uiMyPathRendered = true;

  Pathfinder._activeUserGoalNavMeta = userGoalNavMeta;

  var templateFetchRes = await Pathfinder.uiFetchTemplate('/lib/pathfinder/html/user-authenticated/my-path.tmpl.html');

  Pathfinder._logDebug('uiRenderMyPath -> templateFetchRes: ', templateFetchRes);

  if (templateFetchRes.error.code !== '0') {
    Pathfinder._logError('uiRenderMyPath -> templateFetchRes: ', templateFetchRes);
    Pathfinder._uiMyPathRendered = false;
    return;
  }

  if (!userGoalNavMeta.current.goalTarget) {
    Pathfinder._logDebug('uiRenderMyPath -> topic not current goal target -> userGoalNavMeta.current: ', userGoalNavMeta.current);
    Pathfinder._uiMyPathRendered = false;
    return;
  }

  var goalProgressPercentage = Pathfinder.getGoalProgressPercentage();

  var tmplParams = {
    myPathUrl: Pathfinder._baseUrl + '/learningpaths',
    homeUrl: Pathfinder._baseUrl + '/learningpaths', // both my path and home are the same
    headline: Pathfinder.getLessonFullTitle(userGoalNavMeta.current.lesson, userGoalNavMeta.topics),
    nextLessonTitle: '',
    nextLessonUrl: '#',
    nextLessonBtnClass: '',
    // progressAmount: userGoalNavMeta.progress.percentage + '%',
    progressAmount: goalProgressPercentage + '%',
    xpAmount: Pathfinder._userXp
  };

  if (userGoalNavMeta.current.goalTarget) {
    tmplParams.headline = Pathfinder.getLessonFullTitle(userGoalNavMeta.current.lesson, userGoalNavMeta.topics);
  } else {
    tmplParams.headline = Pathfinder._activeUserGoalMeta.name;
  }

  if (userGoalNavMeta.nextLesson !== null) {
    tmplParams.nextLessonTitle = Pathfinder.getLessonFullTitle(userGoalNavMeta.nextLesson, userGoalNavMeta.topics);
    tmplParams.nextLessonUrl = '/' + userGoalNavMeta.nextLesson.path;

    // if (Pathfinder._currentLessonFinishedOnInit === false) {
    //   tmplParams.nextLessonBtnClass = '-variant-1';
    // } else {
    //   tmplParams.nextLessonBtnClass = '-variant-6';
    // }
    tmplParams.nextLessonBtnClass = '-variant-1';
  } else {
    tmplParams.nextLessonBtnClass = '-variant-1 -disabled';
  }

  var myPathHtml = Pathfinder.uiPrepareTemplateHtml(templateFetchRes.data, tmplParams);

  document.getElementById('user-profile-bottom-wrapper').innerHTML = myPathHtml;

  var wrapperElm = Util.getInnerElement(document.body, '.w3s-pathfinder.-my-path');

  var menuButtonElm = wrapperElm.querySelector('.-menu-btn');
  menuButtonElm.addEventListener('click', function () {
    Pathfinder.uiRenderMenuModal(userGoalNavMeta);
  });

  Pathfinder._logDebug('uiRenderMyPath -> uiUpdateProgress: ', {
    'MyLearning.finishedPage': MyLearning.finishedPage,
    'userGoalNavMeta.current.goalTarget': userGoalNavMeta.current.goalTarget,
    'userGoalNavMeta.current.lesson': userGoalNavMeta.current.lesson,
    'userGoalNavMeta.current.lesson.goalTarget': userGoalNavMeta.current.lesson.goalTarget,
    'userGoalNavMeta.current.lesson.visited': userGoalNavMeta.current.lesson.visited,
  });

  if (
    Pathfinder._currentLessonFinishedOnInit === false
  ) {
    Pathfinder._bumpXp = true;

    MyLearning.lessonFinishedListeners['Pathfinder -> my path'] = function () {
      Pathfinder.uiUpdateProgress();
    };

    if (MyLearning.lessonFinished) {
      Pathfinder.uiUpdateProgress();
    }
  } else {
    Pathfinder.uiUpdateProgress();
  }

  // cache menu template
  await Pathfinder.uiFetchTemplate('/lib/pathfinder/html/user-authenticated/my-path-menu-modal.tmpl.html');
};

Pathfinder.uiRenderSkills = function (wrapperElm, skills) {
  var outerDiv = document.createElement('div');
  outerDiv.textContent = 'Required skills: ';

  for (var key in skills) {
    if (skills.hasOwnProperty(key)) {
      var span = document.createElement('span');
      span.style.cssText = 'display: inline-block; padding: 2px 5px; margin: 3px; font-size: 10px;';
      span.className = 'w3-blue w3-round-small w3-border';
      span.textContent = key + ': ' + skills[key].level;
      outerDiv.appendChild(span);
    }
  }

  wrapperElm.appendChild(outerDiv);
};

Pathfinder.uiCloseMenuModal = function () {
  var menuWrapperElm = Util.getInnerElement(document.body, '.w3s-pathfinder.-my-path-menu');

  if (menuWrapperElm) {
    // detach event listeners
    menuWrapperElm.removeEventListener('click', Pathfinder.uiStopClickPropagation);

    Util.getInnerElement(menuWrapperElm, '.-close-btn').removeEventListener('click', Pathfinder.uiCloseMenuModal);

    Util.getInnerElement(menuWrapperElm, '.-blur-overlay').removeEventListener('click', Pathfinder.uiCloseMenuModal);

    menuWrapperElm.remove();

    Pathfinder._menuModalRendered = false;
  }
};

Pathfinder.uiRenderMenuWrapper = function (targetElm, template) {
  if (Pathfinder._menuModalRendered) {
    return Util.getInnerElement(targetElm, '.w3s-pathfinder.-my-path-menu');
  }

  Pathfinder._menuModalRendered = true;

  if (typeof targetElm === 'undefined') {
    targetElm = document.body;
  }

  var tmpPlaceholderDiv = document.createElement('div');
  tmpPlaceholderDiv.innerHTML = template;

  targetElm.appendChild(tmpPlaceholderDiv.firstChild);

  var menuWrapperElm = Util.getInnerElement(targetElm, '.w3s-pathfinder.-my-path-menu');

  if (!menuWrapperElm) {
    Pathfinder._logError('uiRenderMenuWrapper -> wrapper elm not found');
    return;
  }

  menuWrapperElm.addEventListener('click', Pathfinder.uiStopClickPropagation);

  Util.getInnerElement(menuWrapperElm, '.-close-btn').addEventListener('click', Pathfinder.uiCloseMenuModal);

  Util.getInnerElement(menuWrapperElm, '.-blur-overlay').addEventListener('click', Pathfinder.uiCloseMenuModal);

  return menuWrapperElm;
};

Pathfinder.uiRenderMenuModal = function (userGoalNavMeta) {
  var menuModalTemplateUrl = '/lib/pathfinder/html/user-authenticated/my-path-menu-modal.tmpl.html';

  if (
    typeof Pathfinder._uiTemplates[menuModalTemplateUrl] === 'undefined'
    || Pathfinder._uiTemplates[menuModalTemplateUrl].error.code !== '0'
  ) {
    Pathfinder._logError('uiRenderMenuModal -> menuModalTemplateUrl cache error: ', Pathfinder._uiTemplates[menuModalTemplateUrl]);
    return;
  }

  var menuWrappermElm = Pathfinder.uiRenderMenuWrapper(window.body, Pathfinder._uiTemplates[menuModalTemplateUrl].data);

  if (!menuWrappermElm) {
    Pathfinder._logError('uiRenderMenuModal -> menuWrappermElm not found');
    return;
  }

  var menuInnerWrapperElm = Util.getInnerElement(menuWrappermElm, '.-scroll-box');

  function createLessonItem(lesson) {
    var lessonItem = document.createElement('div');
    lessonItem.className = '-lesson';
    var lessonLink = document.createElement('a');
    // lessonLink.style.cssText = 'width: 100%; padding: 4px !important;';
    lessonLink.href = "/" + lesson.path;
    lessonLink.innerHTML = Pathfinder.uiGetIconHtml({ id: 'check', containerSize: '24px 24px', style: 'top: -2px; margin-right: 10px; margin-bottom: -5px;' }) + Pathfinder.uiGetIconHtml({ id: 'lesson', style: 'bottom: -2px; margin-right: 11px;' }) + lesson.name;

    var lessonLinkClassName = '-link w3-button w3-small';

    if (lesson.current) {
      lessonLinkClassName += ' -visited';
    }

    if (lesson.current) {
      lessonLinkClassName += ' -current';
    } else if (lesson.nextGoalTarget) {
      lessonLinkClassName += ' -next-goal-target';
    } else if (lesson.goalTarget && !lesson.nextGoalTarget) {
      lessonLinkClassName += ' -goal-target';
    } else if (!lesson.goalTarget) {
      lessonLinkClassName += ' -not-goal-target';
    }

    lessonLink.className = lessonLinkClassName;

    // listItem.style.cssText = 'border-bottom: 1px solid darkgrey;';
    // listItem.style.cssText = 'position: relative; margin-bottom: 2px;';

    lessonItem.appendChild(lessonLink);

    return lessonItem;
  }

  function createChapterList(topic, chapter) {
    var chapterList = document.createElement('div');
    chapterList.className = '-sub-list';
    // sublist.style.cssText = 'padding: 0 0 10px 20px; position: relative;';
    var chapterName = document.createElement('div');
    chapterName.className = '-name';
    // chapterName.style.cssText = 'font-weight: bold; position: relative; left: -20px; padding-bottom: 10px;';
    chapterName.innerHTML = Pathfinder.uiGetIconHtml({ id: topic.uuid, type: 'skill', containerSize: '20px 20px', style: 'bottom: -3px; margin-right: 7px;' }) + topic.name + ' - ' + chapter.name;
    chapterList.appendChild(chapterName);

    chapter.lessons.forEach(function (lesson) {
      chapterList.appendChild(createLessonItem(lesson));
    });

    return chapterList;
  }

  function createTopicList(topic) {
    var topicItem = document.createElement('div');
    topicItem.className = '-list';
    // topicItem.style.cssText = 'padding: 0 0 0 20px; position: relative;';
    var topicName = document.createElement('div');
    topicName.className = '-name';
    // topicName.style.cssText = 'font-weight: bold; position: relative; left: -20px;';
    topicName.innerHTML = Pathfinder.uiGetIconHtml({ id: topic.uuid, type: 'skill', containerSize: '20px 20px', style: 'bottom: -3px; margin-right: 7px;' }) + topic.name;
    topicItem.appendChild(topicName);

    var topicChapters = topic.subSkills;
    for (var chapterUuid in topicChapters) {
      if (topicChapters.hasOwnProperty(chapterUuid)) {
        topicItem.appendChild(createChapterList(topic, topicChapters[chapterUuid]));
      }
    }

    return topicItem;
  }

  var mainList = document.createElement('div');
  mainList.style.cssText = '';

  var topics = userGoalNavMeta.topics;

  for (var topicUuid in topics) {
    if (topics.hasOwnProperty(topicUuid)) {
      topics[topicUuid].uuid = topicUuid;
      mainList.appendChild(createTopicList(topics[topicUuid]));
    }
  }

  menuInnerWrapperElm.appendChild(mainList);

  var activeLink = menuInnerWrapperElm.querySelector('.-link.-current');

  if (activeLink) {
    activeLink.scrollIntoView();
  }
};

Pathfinder.getGoalProgressPercentage = function () {
  var goal = Pathfinder._activeUserGoalMeta;

  if (!goal || !goal.skills) {
    Pathfinder._logError('getGoalProgressPercentage -> invalid goal or skills missing', { goal: goal });
    return;
  }

  var skillIds = Object.keys(goal.skills);
  var totalCompletion = 0;

  for (var i = 0; i < skillIds.length; i++) {
    var skillId = skillIds[i];
    var goalSkill = goal.skills[skillId];
    var userSkillLevel = Pathfinder._userSkills && Pathfinder._userSkills[skillId] ? Pathfinder._userSkills[skillId].level : 0;

    // Calculate the completion percentage for this skill (capped at 100%)
    var skillCompletionPercentage = Math.min(100, (userSkillLevel / goalSkill.level) * 100);

    // Accumulate the total completion percentage
    totalCompletion += skillCompletionPercentage;
  }

  // Calculate the average completion across all skills
  var averageCompletion = skillIds.length > 0 ? totalCompletion / skillIds.length : 0;

  // Round the average completion to the nearest whole number
  var roundedAverageCompletion = Math.round(averageCompletion);

  return roundedAverageCompletion;
};
